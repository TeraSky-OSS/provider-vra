// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyApprovalInitParameters struct {

	// List of actions to trigger approval.
	// List of actions to trigger approval.
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// The level defines the order in which the policy is enforced. Level 1 approvals are applied first, followed by level 2 approvals, and so on. Valid range: 1 - 99.
	// The level defines the order in which the policy is enforced. Level 1 approvals are applied first, followed by level 2 approvals, and so on.
	ApprovalLevel *float64 `json:"approvalLevel,omitempty" tf:"approval_level,omitempty"`

	// Who must approve the request. Supported values: ANY_OF, ALL_OF.
	// Who must approve the request.
	ApprovalMode *string `json:"approvalMode,omitempty" tf:"approval_mode,omitempty"`

	// Approval Type. Supported values: USER, ROLE.
	// Approval Type.
	ApprovalType *string `json:"approvalType,omitempty" tf:"approval_type,omitempty"`

	// List of approvers of the policy.
	// List of approvers of the policy.
	// +listType=set
	Approvers []*string `json:"approvers,omitempty" tf:"approvers,omitempty"`

	// Automatically approve or reject a request after the number of days specified in the Auto expiry trigger field. Supported values: APPROVE, REJECT, NO_EXPIRY.
	// Automatically approve or reject a request after the number of days specified in the Auto expiry trigger field.
	AutoApprovalDecision *string `json:"autoApprovalDecision,omitempty" tf:"auto_approval_decision,omitempty"`

	// The number of days the approvers have to respond before the Auto action is triggered. Valid range: 1 - 30.
	// The number of days the approvers have, to respond before the Auto action is triggered.
	AutoApprovalExpiry *float64 `json:"autoApprovalExpiry,omitempty" tf:"auto_approval_expiry,omitempty"`

	// The policy criteria.
	// The policy criteria.
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	// A human-friendly name used as an identifier for the policy instance.
	// A human-friendly name used as an identifier for the policy instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyApprovalObservation struct {

	// List of actions to trigger approval.
	// List of actions to trigger approval.
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// The level defines the order in which the policy is enforced. Level 1 approvals are applied first, followed by level 2 approvals, and so on. Valid range: 1 - 99.
	// The level defines the order in which the policy is enforced. Level 1 approvals are applied first, followed by level 2 approvals, and so on.
	ApprovalLevel *float64 `json:"approvalLevel,omitempty" tf:"approval_level,omitempty"`

	// Who must approve the request. Supported values: ANY_OF, ALL_OF.
	// Who must approve the request.
	ApprovalMode *string `json:"approvalMode,omitempty" tf:"approval_mode,omitempty"`

	// Approval Type. Supported values: USER, ROLE.
	// Approval Type.
	ApprovalType *string `json:"approvalType,omitempty" tf:"approval_type,omitempty"`

	// List of approvers of the policy.
	// List of approvers of the policy.
	// +listType=set
	Approvers []*string `json:"approvers,omitempty" tf:"approvers,omitempty"`

	// Automatically approve or reject a request after the number of days specified in the Auto expiry trigger field. Supported values: APPROVE, REJECT, NO_EXPIRY.
	// Automatically approve or reject a request after the number of days specified in the Auto expiry trigger field.
	AutoApprovalDecision *string `json:"autoApprovalDecision,omitempty" tf:"auto_approval_decision,omitempty"`

	// The number of days the approvers have to respond before the Auto action is triggered. Valid range: 1 - 30.
	// The number of days the approvers have, to respond before the Auto action is triggered.
	AutoApprovalExpiry *float64 `json:"autoApprovalExpiry,omitempty" tf:"auto_approval_expiry,omitempty"`

	// Date when the entity was created. The date is in ISO 8601 and UTC.
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The user the entity was created by.
	// The user the entity was created by.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// The policy criteria.
	// The policy criteria.
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty" tf:"last_updated_at,omitempty"`

	// The user the entity was last updated by.
	// The user the entity was last updated by.
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	// A human-friendly name used as an identifier for the policy instance.
	// A human-friendly name used as an identifier for the policy instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the organization this entity belongs to.
	// The id of the organization this entity belongs to.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyApprovalParameters struct {

	// List of actions to trigger approval.
	// List of actions to trigger approval.
	// +kubebuilder:validation:Optional
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// The level defines the order in which the policy is enforced. Level 1 approvals are applied first, followed by level 2 approvals, and so on. Valid range: 1 - 99.
	// The level defines the order in which the policy is enforced. Level 1 approvals are applied first, followed by level 2 approvals, and so on.
	// +kubebuilder:validation:Optional
	ApprovalLevel *float64 `json:"approvalLevel,omitempty" tf:"approval_level,omitempty"`

	// Who must approve the request. Supported values: ANY_OF, ALL_OF.
	// Who must approve the request.
	// +kubebuilder:validation:Optional
	ApprovalMode *string `json:"approvalMode,omitempty" tf:"approval_mode,omitempty"`

	// Approval Type. Supported values: USER, ROLE.
	// Approval Type.
	// +kubebuilder:validation:Optional
	ApprovalType *string `json:"approvalType,omitempty" tf:"approval_type,omitempty"`

	// List of approvers of the policy.
	// List of approvers of the policy.
	// +kubebuilder:validation:Optional
	// +listType=set
	Approvers []*string `json:"approvers,omitempty" tf:"approvers,omitempty"`

	// Automatically approve or reject a request after the number of days specified in the Auto expiry trigger field. Supported values: APPROVE, REJECT, NO_EXPIRY.
	// Automatically approve or reject a request after the number of days specified in the Auto expiry trigger field.
	// +kubebuilder:validation:Optional
	AutoApprovalDecision *string `json:"autoApprovalDecision,omitempty" tf:"auto_approval_decision,omitempty"`

	// The number of days the approvers have to respond before the Auto action is triggered. Valid range: 1 - 30.
	// The number of days the approvers have, to respond before the Auto action is triggered.
	// +kubebuilder:validation:Optional
	AutoApprovalExpiry *float64 `json:"autoApprovalExpiry,omitempty" tf:"auto_approval_expiry,omitempty"`

	// The policy criteria.
	// The policy criteria.
	// +kubebuilder:validation:Optional
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	// +kubebuilder:validation:Optional
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	// A human-friendly name used as an identifier for the policy instance.
	// A human-friendly name used as an identifier for the policy instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	// +kubebuilder:validation:Optional
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// PolicyApprovalSpec defines the desired state of PolicyApproval
type PolicyApprovalSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyApprovalParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyApprovalInitParameters `json:"initProvider,omitempty"`
}

// PolicyApprovalStatus defines the observed state of PolicyApproval.
type PolicyApprovalStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyApprovalObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyApproval is the Schema for the PolicyApprovals API. A resource for Approval policies.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra}
type PolicyApproval struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actions) || (has(self.initProvider) && has(self.initProvider.actions))",message="spec.forProvider.actions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.approvalLevel) || (has(self.initProvider) && has(self.initProvider.approvalLevel))",message="spec.forProvider.approvalLevel is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.approvalMode) || (has(self.initProvider) && has(self.initProvider.approvalMode))",message="spec.forProvider.approvalMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.approvalType) || (has(self.initProvider) && has(self.initProvider.approvalType))",message="spec.forProvider.approvalType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.approvers) || (has(self.initProvider) && has(self.initProvider.approvers))",message="spec.forProvider.approvers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoApprovalDecision) || (has(self.initProvider) && has(self.initProvider.autoApprovalDecision))",message="spec.forProvider.autoApprovalDecision is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoApprovalExpiry) || (has(self.initProvider) && has(self.initProvider.autoApprovalExpiry))",message="spec.forProvider.autoApprovalExpiry is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enforcementType) || (has(self.initProvider) && has(self.initProvider.enforcementType))",message="spec.forProvider.enforcementType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PolicyApprovalSpec   `json:"spec"`
	Status PolicyApprovalStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyApprovalList contains a list of PolicyApprovals
type PolicyApprovalList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyApproval `json:"items"`
}

// Repository type metadata.
var (
	PolicyApproval_Kind             = "PolicyApproval"
	PolicyApproval_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyApproval_Kind}.String()
	PolicyApproval_KindAPIVersion   = PolicyApproval_Kind + "." + CRDGroupVersion.String()
	PolicyApproval_GroupVersionKind = CRDGroupVersion.WithKind(PolicyApproval_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyApproval{}, &PolicyApprovalList{})
}
