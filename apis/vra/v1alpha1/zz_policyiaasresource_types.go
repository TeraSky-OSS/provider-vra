// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExcludeResourceRulesInitParameters struct {

	// List of API groups the resources belong to.
	// List of API groups the resources belong to.
	// +listType=set
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// List of API Versions the resources belong to.
	// List of API Versions the resources belong to.
	// +listType=set
	APIVersions []*string `json:"apiVersions,omitempty" tf:"api_versions,omitempty"`

	// List of Operations the admission hook cares about. Supported values: CREATE, UPDATE, DELETE.
	// List of Operations the admission hook cares about.
	// +listType=set
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// List of Resources this rule applies to.
	// List of Resources this rule applies to.
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ExcludeResourceRulesObservation struct {

	// List of API groups the resources belong to.
	// List of API groups the resources belong to.
	// +listType=set
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// List of API Versions the resources belong to.
	// List of API Versions the resources belong to.
	// +listType=set
	APIVersions []*string `json:"apiVersions,omitempty" tf:"api_versions,omitempty"`

	// List of Operations the admission hook cares about. Supported values: CREATE, UPDATE, DELETE.
	// List of Operations the admission hook cares about.
	// +listType=set
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// List of Resources this rule applies to.
	// List of Resources this rule applies to.
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ExcludeResourceRulesParameters struct {

	// List of API groups the resources belong to.
	// List of API groups the resources belong to.
	// +kubebuilder:validation:Optional
	// +listType=set
	APIGroups []*string `json:"apiGroups" tf:"api_groups,omitempty"`

	// List of API Versions the resources belong to.
	// List of API Versions the resources belong to.
	// +kubebuilder:validation:Optional
	// +listType=set
	APIVersions []*string `json:"apiVersions" tf:"api_versions,omitempty"`

	// List of Operations the admission hook cares about. Supported values: CREATE, UPDATE, DELETE.
	// List of Operations the admission hook cares about.
	// +kubebuilder:validation:Optional
	// +listType=set
	Operations []*string `json:"operations" tf:"operations,omitempty"`

	// List of Resources this rule applies to.
	// List of Resources this rule applies to.
	// +kubebuilder:validation:Optional
	// +listType=set
	Resources []*string `json:"resources" tf:"resources,omitempty"`
}

type MatchConditionsInitParameters struct {

	// Expression which will be evaluated by CEL.
	// Expression which will be evaluated by CEL.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Identifier for this match condition.
	// Identifier for this match condition.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MatchConditionsObservation struct {

	// Expression which will be evaluated by CEL.
	// Expression which will be evaluated by CEL.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Identifier for this match condition.
	// Identifier for this match condition.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MatchConditionsParameters struct {

	// Expression which will be evaluated by CEL.
	// Expression which will be evaluated by CEL.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Identifier for this match condition.
	// Identifier for this match condition.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type MatchExpressionsInitParameters struct {

	// The label key that the selector applies to.
	// The label key that the selector applies to.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A key's relationship to a set of values.
	// A key's relationship to a set of values.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// An array of string values.
	// An array of string values.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchExpressionsObservation struct {

	// The label key that the selector applies to.
	// The label key that the selector applies to.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// A key's relationship to a set of values.
	// A key's relationship to a set of values.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// An array of string values.
	// An array of string values.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchExpressionsParameters struct {

	// The label key that the selector applies to.
	// The label key that the selector applies to.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// A key's relationship to a set of values.
	// A key's relationship to a set of values.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// An array of string values.
	// An array of string values.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values" tf:"values,omitempty"`
}

type PolicyIaaSResourceInitParameters struct {

	// The policy criteria.
	// The policy criteria.
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	// Exclude Resource Rules:
	// Exclude Resource Rules.
	ExcludeResourceRules []ExcludeResourceRulesInitParameters `json:"excludeResourceRules,omitempty" tf:"exclude_resource_rules,omitempty"`

	// Failure policy to apply when the policy fails. Supported values: Fail, Ignore.
	// Failure policy to apply when the policy fails.
	FailurePolicy *string `json:"failurePolicy,omitempty" tf:"failure_policy,omitempty"`

	// List of conditions that must be met for a request to be validated:
	// List of conditions that must be met for a request to be validated.
	MatchConditions []MatchConditionsInitParameters `json:"matchConditions,omitempty" tf:"match_conditions,omitempty"`

	// List of label selector requirements that must be met for an object to be validated:
	// List of label selector requirements that must be met for an object to be validated.
	MatchExpressions []MatchExpressionsInitParameters `json:"matchExpressions,omitempty" tf:"match_expressions,omitempty"`

	// Map of {key,value} pairs that must be met for an object to be validated.
	// Map of {key,value} pairs that must be met for an object to be validated.
	// +mapType=granular
	MatchLabels map[string]*string `json:"matchLabels,omitempty" tf:"match_labels,omitempty"`

	// Match policy. Supported values: Exact, Equivalent.
	// Match policy.
	MatchPolicy *string `json:"matchPolicy,omitempty" tf:"match_policy,omitempty"`

	// Identifier for this match condition.
	// A human-friendly name used as an identifier for the policy instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Resource Rules:
	// Resource Rules.
	ResourceRules []ResourceRulesInitParameters `json:"resourceRules,omitempty" tf:"resource_rules,omitempty"`

	// List of validation actions.
	// List of validation actions.
	// +listType=set
	ValidationActions []*string `json:"validationActions,omitempty" tf:"validation_actions,omitempty"`

	// List of CEL expressions which are used to validate admission requests:
	// List of CEL expressions which are used to validate admission requests.
	Validations []ValidationsInitParameters `json:"validations,omitempty" tf:"validations,omitempty"`
}

type PolicyIaaSResourceObservation struct {

	// Date when the entity was created. The date is in ISO 8601 and UTC.
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The user the entity was created by.
	// The user the entity was created by.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// The policy criteria.
	// The policy criteria.
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	// Exclude Resource Rules:
	// Exclude Resource Rules.
	ExcludeResourceRules []ExcludeResourceRulesObservation `json:"excludeResourceRules,omitempty" tf:"exclude_resource_rules,omitempty"`

	// Failure policy to apply when the policy fails. Supported values: Fail, Ignore.
	// Failure policy to apply when the policy fails.
	FailurePolicy *string `json:"failurePolicy,omitempty" tf:"failure_policy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty" tf:"last_updated_at,omitempty"`

	// The user the entity was last updated by.
	// The user the entity was last updated by.
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	// List of conditions that must be met for a request to be validated:
	// List of conditions that must be met for a request to be validated.
	MatchConditions []MatchConditionsObservation `json:"matchConditions,omitempty" tf:"match_conditions,omitempty"`

	// List of label selector requirements that must be met for an object to be validated:
	// List of label selector requirements that must be met for an object to be validated.
	MatchExpressions []MatchExpressionsObservation `json:"matchExpressions,omitempty" tf:"match_expressions,omitempty"`

	// Map of {key,value} pairs that must be met for an object to be validated.
	// Map of {key,value} pairs that must be met for an object to be validated.
	// +mapType=granular
	MatchLabels map[string]*string `json:"matchLabels,omitempty" tf:"match_labels,omitempty"`

	// Match policy. Supported values: Exact, Equivalent.
	// Match policy.
	MatchPolicy *string `json:"matchPolicy,omitempty" tf:"match_policy,omitempty"`

	// Identifier for this match condition.
	// A human-friendly name used as an identifier for the policy instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the organization this entity belongs to.
	// The id of the organization this entity belongs to.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Resource Rules:
	// Resource Rules.
	ResourceRules []ResourceRulesObservation `json:"resourceRules,omitempty" tf:"resource_rules,omitempty"`

	// List of validation actions.
	// List of validation actions.
	// +listType=set
	ValidationActions []*string `json:"validationActions,omitempty" tf:"validation_actions,omitempty"`

	// List of CEL expressions which are used to validate admission requests:
	// List of CEL expressions which are used to validate admission requests.
	Validations []ValidationsObservation `json:"validations,omitempty" tf:"validations,omitempty"`
}

type PolicyIaaSResourceParameters struct {

	// The policy criteria.
	// The policy criteria.
	// +kubebuilder:validation:Optional
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	// +kubebuilder:validation:Optional
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	// Exclude Resource Rules:
	// Exclude Resource Rules.
	// +kubebuilder:validation:Optional
	ExcludeResourceRules []ExcludeResourceRulesParameters `json:"excludeResourceRules,omitempty" tf:"exclude_resource_rules,omitempty"`

	// Failure policy to apply when the policy fails. Supported values: Fail, Ignore.
	// Failure policy to apply when the policy fails.
	// +kubebuilder:validation:Optional
	FailurePolicy *string `json:"failurePolicy,omitempty" tf:"failure_policy,omitempty"`

	// List of conditions that must be met for a request to be validated:
	// List of conditions that must be met for a request to be validated.
	// +kubebuilder:validation:Optional
	MatchConditions []MatchConditionsParameters `json:"matchConditions,omitempty" tf:"match_conditions,omitempty"`

	// List of label selector requirements that must be met for an object to be validated:
	// List of label selector requirements that must be met for an object to be validated.
	// +kubebuilder:validation:Optional
	MatchExpressions []MatchExpressionsParameters `json:"matchExpressions,omitempty" tf:"match_expressions,omitempty"`

	// Map of {key,value} pairs that must be met for an object to be validated.
	// Map of {key,value} pairs that must be met for an object to be validated.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	MatchLabels map[string]*string `json:"matchLabels,omitempty" tf:"match_labels,omitempty"`

	// Match policy. Supported values: Exact, Equivalent.
	// Match policy.
	// +kubebuilder:validation:Optional
	MatchPolicy *string `json:"matchPolicy,omitempty" tf:"match_policy,omitempty"`

	// Identifier for this match condition.
	// A human-friendly name used as an identifier for the policy instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	// +kubebuilder:validation:Optional
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Resource Rules:
	// Resource Rules.
	// +kubebuilder:validation:Optional
	ResourceRules []ResourceRulesParameters `json:"resourceRules,omitempty" tf:"resource_rules,omitempty"`

	// List of validation actions.
	// List of validation actions.
	// +kubebuilder:validation:Optional
	// +listType=set
	ValidationActions []*string `json:"validationActions,omitempty" tf:"validation_actions,omitempty"`

	// List of CEL expressions which are used to validate admission requests:
	// List of CEL expressions which are used to validate admission requests.
	// +kubebuilder:validation:Optional
	Validations []ValidationsParameters `json:"validations,omitempty" tf:"validations,omitempty"`
}

type ResourceRulesInitParameters struct {

	// List of API groups the resources belong to.
	// List of API groups the resources belong to.
	// +listType=set
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// List of API Versions the resources belong to.
	// List of API Versions the resources belong to.
	// +listType=set
	APIVersions []*string `json:"apiVersions,omitempty" tf:"api_versions,omitempty"`

	// List of Operations the admission hook cares about. Supported values: CREATE, UPDATE, DELETE.
	// List of Operations the admission hook cares about.
	// +listType=set
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// List of Resources this rule applies to.
	// List of Resources this rule applies to.
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ResourceRulesObservation struct {

	// List of API groups the resources belong to.
	// List of API groups the resources belong to.
	// +listType=set
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// List of API Versions the resources belong to.
	// List of API Versions the resources belong to.
	// +listType=set
	APIVersions []*string `json:"apiVersions,omitempty" tf:"api_versions,omitempty"`

	// List of Operations the admission hook cares about. Supported values: CREATE, UPDATE, DELETE.
	// List of Operations the admission hook cares about.
	// +listType=set
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// List of Resources this rule applies to.
	// List of Resources this rule applies to.
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ResourceRulesParameters struct {

	// List of API groups the resources belong to.
	// List of API groups the resources belong to.
	// +kubebuilder:validation:Optional
	// +listType=set
	APIGroups []*string `json:"apiGroups" tf:"api_groups,omitempty"`

	// List of API Versions the resources belong to.
	// List of API Versions the resources belong to.
	// +kubebuilder:validation:Optional
	// +listType=set
	APIVersions []*string `json:"apiVersions" tf:"api_versions,omitempty"`

	// List of Operations the admission hook cares about. Supported values: CREATE, UPDATE, DELETE.
	// List of Operations the admission hook cares about.
	// +kubebuilder:validation:Optional
	// +listType=set
	Operations []*string `json:"operations" tf:"operations,omitempty"`

	// List of Resources this rule applies to.
	// List of Resources this rule applies to.
	// +kubebuilder:validation:Optional
	// +listType=set
	Resources []*string `json:"resources" tf:"resources,omitempty"`
}

type ValidationsInitParameters struct {

	// Expression which will be evaluated by CEL.
	// Expression which will be evaluated by CEL.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Message displayed when validation fails.
	// Message displayed when validation fails.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// CEL expression that evaluates to the validation failure message that is returned when this rule fails.
	// CEL expression that evaluates to the validation failure message that is returned when this rule fails.
	MessageExpression *string `json:"messageExpression,omitempty" tf:"message_expression,omitempty"`

	// Machine-readable description of why this validation failed.
	// Machine-readable description of why this validation failed.
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`
}

type ValidationsObservation struct {

	// Expression which will be evaluated by CEL.
	// Expression which will be evaluated by CEL.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Message displayed when validation fails.
	// Message displayed when validation fails.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// CEL expression that evaluates to the validation failure message that is returned when this rule fails.
	// CEL expression that evaluates to the validation failure message that is returned when this rule fails.
	MessageExpression *string `json:"messageExpression,omitempty" tf:"message_expression,omitempty"`

	// Machine-readable description of why this validation failed.
	// Machine-readable description of why this validation failed.
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`
}

type ValidationsParameters struct {

	// Expression which will be evaluated by CEL.
	// Expression which will be evaluated by CEL.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Message displayed when validation fails.
	// Message displayed when validation fails.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// CEL expression that evaluates to the validation failure message that is returned when this rule fails.
	// CEL expression that evaluates to the validation failure message that is returned when this rule fails.
	// +kubebuilder:validation:Optional
	MessageExpression *string `json:"messageExpression,omitempty" tf:"message_expression,omitempty"`

	// Machine-readable description of why this validation failed.
	// Machine-readable description of why this validation failed.
	// +kubebuilder:validation:Optional
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`
}

// PolicyIaaSResourceSpec defines the desired state of PolicyIaaSResource
type PolicyIaaSResourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyIaaSResourceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyIaaSResourceInitParameters `json:"initProvider,omitempty"`
}

// PolicyIaaSResourceStatus defines the observed state of PolicyIaaSResource.
type PolicyIaaSResourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyIaaSResourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyIaaSResource is the Schema for the PolicyIaaSResources API. A resource for IaaS Resource policies.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra}
type PolicyIaaSResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enforcementType) || (has(self.initProvider) && has(self.initProvider.enforcementType))",message="spec.forProvider.enforcementType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.failurePolicy) || (has(self.initProvider) && has(self.initProvider.failurePolicy))",message="spec.forProvider.failurePolicy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceRules) || (has(self.initProvider) && has(self.initProvider.resourceRules))",message="spec.forProvider.resourceRules is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.validationActions) || (has(self.initProvider) && has(self.initProvider.validationActions))",message="spec.forProvider.validationActions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.validations) || (has(self.initProvider) && has(self.initProvider.validations))",message="spec.forProvider.validations is a required parameter"
	Spec   PolicyIaaSResourceSpec   `json:"spec"`
	Status PolicyIaaSResourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIaaSResourceList contains a list of PolicyIaaSResources
type PolicyIaaSResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyIaaSResource `json:"items"`
}

// Repository type metadata.
var (
	PolicyIaaSResource_Kind             = "PolicyIaaSResource"
	PolicyIaaSResource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyIaaSResource_Kind}.String()
	PolicyIaaSResource_KindAPIVersion   = PolicyIaaSResource_Kind + "." + CRDGroupVersion.String()
	PolicyIaaSResource_GroupVersionKind = CRDGroupVersion.WithKind(PolicyIaaSResource_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyIaaSResource{}, &PolicyIaaSResourceList{})
}
