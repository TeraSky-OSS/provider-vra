// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContentSharingPolicyInitParameters struct {

	// List of catalog item ids to share.
	// List of catalog item ids to share.
	// +listType=set
	CatalogItemIds []*string `json:"catalogItemIds,omitempty" tf:"catalog_item_ids,omitempty"`

	// List of catalog source ids to share.
	// List of catalog source ids to share.
	// +listType=set
	CatalogSourceIds []*string `json:"catalogSourceIds,omitempty" tf:"catalog_source_ids,omitempty"`

	// The policy description.
	// The policy description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The policy name.
	// The policy name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project to which the policy belongs.
	// The ID of the project to which the policy belongs.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ContentSharingPolicyObservation struct {

	// List of catalog item ids to share.
	// List of catalog item ids to share.
	// +listType=set
	CatalogItemIds []*string `json:"catalogItemIds,omitempty" tf:"catalog_item_ids,omitempty"`

	// List of catalog source ids to share.
	// List of catalog source ids to share.
	// +listType=set
	CatalogSourceIds []*string `json:"catalogSourceIds,omitempty" tf:"catalog_source_ids,omitempty"`

	// Policy creation timestamp.
	// Policy creation timestamp.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Policy author.
	// Policy author.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// The policy description.
	// The policy description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Most recent policy update timestamp.
	// Most recent policy update timestamp.
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty" tf:"last_updated_at,omitempty"`

	// Most recent policy editor.
	// Most recent policy editor..
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	// The policy name.
	// The policy name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the organization to which the policy belongs.
	// The ID of the organization to which the policy belongs.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The ID of the project to which the policy belongs.
	// The ID of the project to which the policy belongs.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ContentSharingPolicyParameters struct {

	// List of catalog item ids to share.
	// List of catalog item ids to share.
	// +kubebuilder:validation:Optional
	// +listType=set
	CatalogItemIds []*string `json:"catalogItemIds,omitempty" tf:"catalog_item_ids,omitempty"`

	// List of catalog source ids to share.
	// List of catalog source ids to share.
	// +kubebuilder:validation:Optional
	// +listType=set
	CatalogSourceIds []*string `json:"catalogSourceIds,omitempty" tf:"catalog_source_ids,omitempty"`

	// The policy description.
	// The policy description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The policy name.
	// The policy name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project to which the policy belongs.
	// The ID of the project to which the policy belongs.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// ContentSharingPolicySpec defines the desired state of ContentSharingPolicy
type ContentSharingPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContentSharingPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContentSharingPolicyInitParameters `json:"initProvider,omitempty"`
}

// ContentSharingPolicyStatus defines the observed state of ContentSharingPolicy.
type ContentSharingPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContentSharingPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ContentSharingPolicy is the Schema for the ContentSharingPolicys API. Creates a vra_content_sharing_policy resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra}
type ContentSharingPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   ContentSharingPolicySpec   `json:"spec"`
	Status ContentSharingPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContentSharingPolicyList contains a list of ContentSharingPolicys
type ContentSharingPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContentSharingPolicy `json:"items"`
}

// Repository type metadata.
var (
	ContentSharingPolicy_Kind             = "ContentSharingPolicy"
	ContentSharingPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContentSharingPolicy_Kind}.String()
	ContentSharingPolicy_KindAPIVersion   = ContentSharingPolicy_Kind + "." + CRDGroupVersion.String()
	ContentSharingPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ContentSharingPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ContentSharingPolicy{}, &ContentSharingPolicyList{})
}
