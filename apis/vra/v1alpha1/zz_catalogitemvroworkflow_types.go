// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogItemVROWorkflowInitParameters struct {

	// A human-friendly description for the catalog item.
	// A human-friendly description for the catalog item.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to allow this catalog to be shared with multiple projects or to restrict it to the specified project.
	// Whether to allow this catalog to be shared with multiple projects or to restrict it to the specified project.
	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	// ID of the icon to associate with this catalog item.
	// ID of the icon to associate with this catalog item.
	IconID *string `json:"iconId,omitempty" tf:"icon_id,omitempty"`

	// The name of the catalog item.
	// The name of the catalog item.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project to share this catalog item with.
	// ID of the project to share this catalog item with.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the vRO workflow to publish.
	// ID of the vRO workflow to publish.
	WorkflowID *string `json:"workflowId,omitempty" tf:"workflow_id,omitempty"`
}

type CatalogItemVROWorkflowObservation struct {

	// Date when the entity was created. The date is in ISO 8601 and UTC.
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The user the entity was created by.
	// The user the entity was created by.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// A human-friendly description for the catalog item.
	// A human-friendly description for the catalog item.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to allow this catalog to be shared with multiple projects or to restrict it to the specified project.
	// Whether to allow this catalog to be shared with multiple projects or to restrict it to the specified project.
	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the icon to associate with this catalog item.
	// ID of the icon to associate with this catalog item.
	IconID *string `json:"iconId,omitempty" tf:"icon_id,omitempty"`

	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty" tf:"last_updated_at,omitempty"`

	// The user the entity was last updated by.
	// The user the entity was last updated by.
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	// The name of the catalog item.
	// The name of the catalog item.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project to share this catalog item with.
	// ID of the project to share this catalog item with.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the vRO workflow to publish.
	// ID of the vRO workflow to publish.
	WorkflowID *string `json:"workflowId,omitempty" tf:"workflow_id,omitempty"`
}

type CatalogItemVROWorkflowParameters struct {

	// A human-friendly description for the catalog item.
	// A human-friendly description for the catalog item.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to allow this catalog to be shared with multiple projects or to restrict it to the specified project.
	// Whether to allow this catalog to be shared with multiple projects or to restrict it to the specified project.
	// +kubebuilder:validation:Optional
	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	// ID of the icon to associate with this catalog item.
	// ID of the icon to associate with this catalog item.
	// +kubebuilder:validation:Optional
	IconID *string `json:"iconId,omitempty" tf:"icon_id,omitempty"`

	// The name of the catalog item.
	// The name of the catalog item.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project to share this catalog item with.
	// ID of the project to share this catalog item with.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the vRO workflow to publish.
	// ID of the vRO workflow to publish.
	// +kubebuilder:validation:Optional
	WorkflowID *string `json:"workflowId,omitempty" tf:"workflow_id,omitempty"`
}

// CatalogItemVROWorkflowSpec defines the desired state of CatalogItemVROWorkflow
type CatalogItemVROWorkflowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogItemVROWorkflowParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CatalogItemVROWorkflowInitParameters `json:"initProvider,omitempty"`
}

// CatalogItemVROWorkflowStatus defines the observed state of CatalogItemVROWorkflow.
type CatalogItemVROWorkflowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogItemVROWorkflowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CatalogItemVROWorkflow is the Schema for the CatalogItemVROWorkflows API. A resource for vRO Workflow Catalog Items.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra}
type CatalogItemVROWorkflow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.workflowId) || (has(self.initProvider) && has(self.initProvider.workflowId))",message="spec.forProvider.workflowId is a required parameter"
	Spec   CatalogItemVROWorkflowSpec   `json:"spec"`
	Status CatalogItemVROWorkflowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogItemVROWorkflowList contains a list of CatalogItemVROWorkflows
type CatalogItemVROWorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CatalogItemVROWorkflow `json:"items"`
}

// Repository type metadata.
var (
	CatalogItemVROWorkflow_Kind             = "CatalogItemVROWorkflow"
	CatalogItemVROWorkflow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CatalogItemVROWorkflow_Kind}.String()
	CatalogItemVROWorkflow_KindAPIVersion   = CatalogItemVROWorkflow_Kind + "." + CRDGroupVersion.String()
	CatalogItemVROWorkflow_GroupVersionKind = CRDGroupVersion.WithKind(CatalogItemVROWorkflow_Kind)
)

func init() {
	SchemeBuilder.Register(&CatalogItemVROWorkflow{}, &CatalogItemVROWorkflowList{})
}
