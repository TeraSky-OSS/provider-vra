// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyDay2ActionInitParameters struct {

	// List of allowed actions for authority/authorities.
	// List of allowed actions for authority/authorities.
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// List of authorities that will be allowed to perform certain actions.
	// List of authorities that will be allowed to perform certain actions.
	// +listType=set
	Authorities []*string `json:"authorities,omitempty" tf:"authorities,omitempty"`

	// The policy criteria.
	// The policy criteria.
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	// A human-friendly name used as an identifier for the policy instance.
	// A human-friendly name used as an identifier for the policy instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyDay2ActionObservation struct {

	// List of allowed actions for authority/authorities.
	// List of allowed actions for authority/authorities.
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// List of authorities that will be allowed to perform certain actions.
	// List of authorities that will be allowed to perform certain actions.
	// +listType=set
	Authorities []*string `json:"authorities,omitempty" tf:"authorities,omitempty"`

	// Date when the entity was created. The date is in ISO 8601 and UTC.
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The user the entity was created by.
	// The user the entity was created by.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// The policy criteria.
	// The policy criteria.
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty" tf:"last_updated_at,omitempty"`

	// The user the entity was last updated by.
	// The user the entity was last updated by.
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	// A human-friendly name used as an identifier for the policy instance.
	// A human-friendly name used as an identifier for the policy instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the organization this entity belongs to.
	// The id of the organization this entity belongs to.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyDay2ActionParameters struct {

	// List of allowed actions for authority/authorities.
	// List of allowed actions for authority/authorities.
	// +kubebuilder:validation:Optional
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// List of authorities that will be allowed to perform certain actions.
	// List of authorities that will be allowed to perform certain actions.
	// +kubebuilder:validation:Optional
	// +listType=set
	Authorities []*string `json:"authorities,omitempty" tf:"authorities,omitempty"`

	// The policy criteria.
	// The policy criteria.
	// +kubebuilder:validation:Optional
	Criteria []map[string]*string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A human-friendly description for the policy instance.
	// A human-friendly description for the policy instance.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of enforcement for the policy. Supported values: HARD, SOFT.
	// The type of enforcement for the policy.
	// +kubebuilder:validation:Optional
	EnforcementType *string `json:"enforcementType,omitempty" tf:"enforcement_type,omitempty"`

	// A human-friendly name used as an identifier for the policy instance.
	// A human-friendly name used as an identifier for the policy instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project based criteria. Updating this argument triggers a recreation of the resource. It cannot be specified when project_id is set.
	// The project based criteria.
	// +kubebuilder:validation:Optional
	ProjectCriteria []map[string]*string `json:"projectCriteria,omitempty" tf:"project_criteria,omitempty"`

	// The id of the project this entity belongs to. Updating this argument triggers a recreation of the resource.
	// The id of the project this entity belongs to.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// PolicyDay2ActionSpec defines the desired state of PolicyDay2Action
type PolicyDay2ActionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyDay2ActionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyDay2ActionInitParameters `json:"initProvider,omitempty"`
}

// PolicyDay2ActionStatus defines the observed state of PolicyDay2Action.
type PolicyDay2ActionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyDay2ActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyDay2Action is the Schema for the PolicyDay2Actions API. A resource for Day2 Action policies.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra}
type PolicyDay2Action struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorities) || (has(self.initProvider) && has(self.initProvider.authorities))",message="spec.forProvider.authorities is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enforcementType) || (has(self.initProvider) && has(self.initProvider.enforcementType))",message="spec.forProvider.enforcementType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PolicyDay2ActionSpec   `json:"spec"`
	Status PolicyDay2ActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDay2ActionList contains a list of PolicyDay2Actions
type PolicyDay2ActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyDay2Action `json:"items"`
}

// Repository type metadata.
var (
	PolicyDay2Action_Kind             = "PolicyDay2Action"
	PolicyDay2Action_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyDay2Action_Kind}.String()
	PolicyDay2Action_KindAPIVersion   = PolicyDay2Action_Kind + "." + CRDGroupVersion.String()
	PolicyDay2Action_GroupVersionKind = CRDGroupVersion.WithKind(PolicyDay2Action_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyDay2Action{}, &PolicyDay2ActionList{})
}
